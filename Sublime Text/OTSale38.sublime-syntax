%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
file_extensions: [log.txt]
  #- ec
scope: source.example-c
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.example-c
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.example-c
      push: line_comment

    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(if|else|for|while)\b'
      scope: keyword.control.example-c
    
    #gms: 
    - match: '(?i)^\d+\.\d+\.\d+\s+\d+\:\d+\:\d+\s+\b(\d+)\b'
      captures:
        1: vfisher.color1

    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.example-c

      # Numbers 
    - match: '(?i)\b(ошибка|Запись об ошибке)\b.*'
      scope: vfisher.error

    - match: '(?i)\bСООБЩЕНИЕ.*'
      scope: storage.type

    - match: '(?i)\bОтображение окна закрытия чека\b.*'
      scope: variable.parameter

    - match: '(?i)\b(Установлен статус|Установка статуса)\b\s(.*)'
      captures:
        1: entity.name.class
        2: invalid
      
    # Прро
    - match: '(?i)\b(_IsConnectNetPRRO|GetModemStatus)\b.*'
      push: line_comment

    - match: '(?i)\b(FIsBlockSendOfflineDocsCheckStatus|Переход в офлайн|IsSentPackage)\b.*'
      push: line_comment

    - match: '(?i)\b(CheckOfflineBackground|Блокировка\sперехода|Документ\sФН|SendMessageJSON|StartOfflineSession)\b.*'
      push: line_comment

    - match: '(?i)\b(GetStatus|Offline\ssession|SetOfflineModeState|ПРРО|OpenOfflineSession)\b.*'
      push: line_comment      

  #gms: 



  double_quoted_string:
    - meta_scope: string.quoted.double.example-c
    - match: '\\.'
      scope: constant.character.escape.example-c
    - match: '"'
      scope: punctuation.definition.string.end.example-c
      pop: true

  line_comment:
    - meta_scope: comment.line.example-c
    - match: $
      pop: true
